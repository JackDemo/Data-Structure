package main;

import java.util.Stack;

public class HuffmanTree {

	private StringBuilder charset;// 字符集合
	private TriElement huftree[];// 静态三叉链表节点数组

	public HuffmanTree(int[] weight) {
		this.charset = new StringBuilder();
		for (int i = 0; i < weight.length; i++) {
			charset.append((char) 'A' + i);
		}
		int n = weight.length;
		huftree = new TriElement[2*n-1];
		for (int i = 0; i < n; i++) {
			huftree[i] = new TriElement(weight[i]);
		}
		for (int i = n; i < 2*n-1; i++) {
			int min = Integer.MAX_VALUE;
			int weakMin = min;
			int indexOne = -1;
			int indexTwo = -1;
			for (int j = 0; j < i; j++) {
				if (this.huftree[j].parent==-1) {
					if (this.huftree[j].data<min) {
						weakMin = min;
						indexTwo = indexOne;
						min = this.huftree[j].data;
						indexOne = j;
					}
					else if (this.huftree[j].data<weakMin) {
						weakMin = this.huftree[j].data;
						indexTwo = j;
					}
				}
			}
			this.huftree[indexOne].parent = i;
			this.huftree[indexTwo].parent = i;
			this.huftree[i] = new TriElement(min+weakMin, -1, indexOne, indexTwo);
		}
	}

	
	private String getCode(int i) {
		//int n = (int)Math.sqrt(this.huftree.length+1);
		Stack<Integer> hufCode = new Stack<Integer>();
		int child = i;
		int parent = this.huftree[child].parent;
		while (parent!=-1) {
			hufCode.push(huftree[parent].left==child?0:1);
			child = parent;
			parent = huftree[parent].parent;
		}
		StringBuilder code = new StringBuilder();
		while (!hufCode.isEmpty()) {
			code.append(hufCode.pop()+"");
		}
		return code.toString();
	}
	public static void main(String[] args) {
		//String text = "AAAABBBCDDBBAAA";
		int[] weight = {5,29,7,8,14,23,3,11};
		HuffmanTree hTree = new HuffmanTree(weight);
		String str = "ABC";
		System.out.println(str.charAt(0));
		for (int i = 0; i < weight.length; i++) {
			System.out.println(hTree.charset.toString()+":   "+hTree.getCode(i));
			
		}
	}

}
